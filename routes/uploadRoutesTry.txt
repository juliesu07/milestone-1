const express = require('express');
const path = require('path');
const fs = require('fs');
const formidable = require('formidable');  // Import the 'formidable' package
const Video = require('../models/Video');
const User = require('../models/User');
const ffmpegPath = require('ffmpeg-static');
const ffmpeg = require('fluent-ffmpeg');
const redis = require('redis');
const { v4: uuidv4 } = require('uuid');

const router = express.Router();

// Set FFmpeg binary path
ffmpeg.setFfmpegPath(ffmpegPath);

// Create Redis client for background job processing
const redisClient = redis.createClient({ url: 'redis://localhost:6379' });

// Use async/await to connect to Redis
async function connectRedis() {
  await redisClient.connect();
}

router.use(express.json());

// Route to handle video upload
router.post('/upload', async (req, res) => {
    const form = new formidable.IncomingForm();  // Correctly instantiate the form
    
    form.parse(req, async (err, fields, files) => {
        if (err) {
            return res.status(400).json({ status: 'ERROR', error: true, message: 'File upload error' });
        }

        const author = fields.author && Array.isArray(fields.author) ? fields.author[0] : fields.author;
        const title = fields.title && Array.isArray(fields.title) ? fields.title[0] : fields.title;
        const description = fields.description && Array.isArray(fields.description) ? fields.description[0] : fields.description;

        const userId = req.session.userId;
        const file = files.mp4File;

        if (!file || !author || !title || !description) {
            return res.status(400).json({ status: 'ERROR', error: true, message: 'Missing required fields' });
        }

        try {
            // Create a video document in the database with a 'processing' status
            const count = await Video.countDocuments();
            const video = new Video({
                author,
                title,
                description,
                status: 'processing',
            });

            await video.save();

            // Immediately respond to the user with the video ID
            res.status(200).send({ status: 'OK', id: video._id });

            // Rename and move the uploaded file to the videos directory
            const tempFilePath = file.filepath;
            if (!file || !file.originalFilename) {
                throw new Error('File is missing or invalid');
            }
            const finalFilePath = path.join(__dirname, '..', 'videos', `${video._id}${path.extname(file.originalFilename)}`);

            // Move file but donâ€™t reprocess it here
            fs.renameSync(tempFilePath, finalFilePath);

            // Add job to Redis queue for background processing
            const jobData = JSON.stringify({
                videoId: video._id,
                tempFilePath: finalFilePath,  // Send file path to be used later
                fileName: `${video._id}${path.extname(file.originalFilename)}`,
            });

            // Use Redis client method directly without promisify
            await redisClient.lpush('video_upload_queue', jobData);

            // Update user document with the video ID
            await User.findByIdAndUpdate(userId, { $push: { videos: video._id } });

        } catch (error) {
            console.error(error);
            // Ensure no further response is sent if an error occurs
            if (!res.headersSent) {
                res.status(500).json({ status: 'ERROR', error: true, message: error.message });
            }
        }
    });
});


// Connect to Redis before starting the server
connectRedis().then(() => {
    console.log('Connected to Redis');
}).catch((err) => {
    console.error('Error connecting to Redis:', err);
});

module.exports = router;
